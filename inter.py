#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 29, 2019 04:57:51 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import inter_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    inter_support.set_Tk_var()
    top = Toplevel1 (root)
    inter_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    inter_support.set_Tk_var()
    top = Toplevel1 (w)
    inter_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("816x615+205+306")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.049, rely=0.033, relheight=0.937
                , relwidth=0.912)
        self.TNotebook1.configure(width=744)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Page 1",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="#d8d83a")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Page 2",compound="left",underline="-1",)
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="Pg3",compound="none",underline="-1",)
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(3, text="pg4",compound="none",underline="-1",)
        self.TNotebook1_t3.configure(background="#d9d9d9")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(4, text="pg5",compound="none",underline="-1",)
        self.TNotebook1_t4.configure(background="#d9d9d9")
        self.TNotebook1_t4.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t4.configure(highlightcolor="black")

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook1_t0)
        self.TLabelframe1.place(relx=0.014, rely=0.073, relheight=0.136
                , relwidth=0.932)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''sdf''')
        self.TLabelframe1.configure(width=690)

        self.TCombobox1 = ttk.Combobox(self.TLabelframe1)
        self.TCombobox1.place(relx=0.029, rely=0.533, relheight=0.28
                , relwidth=0.106, bordermode='ignore')
        self.value_list = [DC1,???,]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(state='readonly')
        self.TCombobox1.configure(foreground="#000000")
        self.TCombobox1.configure(background="#000000")
        self.TCombobox1.configure(takefocus="")

        self.Label1 = tk.Label(self.TLabelframe1)
        self.Label1.place(relx=-0.029, rely=0.533, height=23, width=54
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI Black} -size 10 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#efb1d0")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''??''')

        self.TCombobox2 = ttk.Combobox(self.TLabelframe1)
        self.TCombobox2.place(relx=0.217, rely=0.533, relheight=0.28
                , relwidth=0.091, bordermode='ignore')
        self.TCombobox2.configure(textvariable=inter_support.combobox)
        self.TCombobox2.configure(takefocus="")

        self.Label2 = tk.Label(self.TLabelframe1)
        self.Label2.place(relx=0.159, rely=0.533, height=21, width=34
                , bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Label''')

        self.Label3 = tk.Label(self.TLabelframe1)
        self.Label3.place(relx=0.319, rely=0.533, height=21, width=34
                , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Label''')

        self.TCombobox3 = ttk.Combobox(self.TLabelframe1)
        self.TCombobox3.place(relx=0.362, rely=0.533, relheight=0.28
                , relwidth=0.062, bordermode='ignore')
        self.TCombobox3.configure(textvariable=inter_support.combobox)
        self.TCombobox3.configure(takefocus="")

        self.Text1 = tk.Text(self.TLabelframe1)
        self.Text1.place(relx=0.565, rely=0.4, relheight=0.32, relwidth=0.093
                , bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=64)
        self.Text1.configure(wrap="word")

        self.Label4 = tk.Label(self.TLabelframe1)
        self.Label4.place(relx=0.478, rely=0.4, height=21, width=34
                , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Label''')

        self.tNo43_t0_tLa45_tex44 = tk.Text(self.TLabelframe1)
        self.tNo43_t0_tLa45_tex44.place(relx=0.71, rely=0.4, relheight=0.32
                , relwidth=0.093, bordermode='ignore')
        self.tNo43_t0_tLa45_tex44.configure(background="#ffa8c8")
        self.tNo43_t0_tLa45_tex44.configure(font="TkTextFont")
        self.tNo43_t0_tLa45_tex44.configure(foreground="black")
        self.tNo43_t0_tLa45_tex44.configure(highlightbackground="#d9d9d9")
        self.tNo43_t0_tLa45_tex44.configure(highlightcolor="black")
        self.tNo43_t0_tLa45_tex44.configure(insertbackground="black")
        self.tNo43_t0_tLa45_tex44.configure(selectbackground="#c4c4c4")
        self.tNo43_t0_tLa45_tex44.configure(selectforeground="black")
        self.tNo43_t0_tLa45_tex44.configure(width=64)
        self.tNo43_t0_tLa45_tex44.configure(wrap="word")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.tNo43_t0_tLa45_tex44, tooltip_font, '''fedsf''', delay=0.5)

        self.TButton1 = ttk.Button(self.TLabelframe1)
        self.TButton1.place(relx=0.855, rely=0.4, height=25, width=76
                , bordermode='ignore')
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Tbutton''')

        self.TLabelframe2 = ttk.Labelframe(self.TNotebook1_t0)
        self.TLabelframe2.place(relx=0.068, rely=0.255, relheight=0.318
                , relwidth=0.878)
        self.TLabelframe2.configure(relief='')
        self.TLabelframe2.configure(text='''Tlabelframe''')
        self.TLabelframe2.configure(width=650)

        self.TCombobox4 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox4.place(relx=0.031, rely=0.171, relheight=0.12
                , relwidth=0.082, bordermode='ignore')
        self.TCombobox4.configure(textvariable=inter_support.combobox)
        self.TCombobox4.configure(width=53)
        self.TCombobox4.configure(takefocus="")

        self.TCombobox4 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox4.place(relx=0.138, rely=0.171, relheight=0.12
                , relwidth=0.082, bordermode='ignore')
        self.TCombobox4.configure(textvariable=inter_support.combobox)
        self.TCombobox4.configure(takefocus="")

        self.TCombobox4 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox4.place(relx=0.262, rely=0.171, relheight=0.12
                , relwidth=0.066, bordermode='ignore')
        self.TCombobox4.configure(textvariable=inter_support.combobox)
        self.TCombobox4.configure(width=43)
        self.TCombobox4.configure(takefocus="")

        self.TCombobox4 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox4.place(relx=0.369, rely=0.171, relheight=0.12
                , relwidth=0.066, bordermode='ignore')
        self.TCombobox4.configure(textvariable=inter_support.combobox)
        self.TCombobox4.configure(takefocus="")

        self.TCombobox4 = ttk.Combobox(self.TLabelframe2)
        self.TCombobox4.place(relx=0.477, rely=0.171, relheight=0.12
                , relwidth=0.066, bordermode='ignore')
        self.TCombobox4.configure(textvariable=inter_support.combobox)
        self.TCombobox4.configure(takefocus="")

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





